import { template as _$template } from "solid-js/web";
import { delegateEvents as _$delegateEvents } from "solid-js/web";
import { createComponent as _$createComponent } from "solid-js/web";
import { style as _$style } from "solid-js/web";
import { effect as _$effect } from "solid-js/web";
import { insert as _$insert } from "solid-js/web";
import { memo as _$memo } from "solid-js/web";
const _tmpl$ = /*#__PURE__*/_$template(`<div><div class="fixed flex text-xs font-bold items-center justify-center text-red-500 rounded border border-solid border-red-500"><button class="absolute top-1 left-1 bg-red-500 text-white font-bold p-0.5 rounded hover:bg-red-800"><svg viewBox="0 0 24 24"><path fill="currentColor" d="M12.89,3L14.85,3.4L11.11,21L9.15,20.6L12.89,3M19.59,12L16,8.41V5.58L22.42,12L16,18.41V15.58L19.59,12M1.58,12L8,5.58V8.41L4.41,12L8,15.58V18.41L1.58,12Z">`),
  _tmpl$2 = /*#__PURE__*/_$template(`<div class="fixed flex text-xs font-bold items-center justify-center text-red-500">`),
  _tmpl$3 = /*#__PURE__*/_$template(`<div class="fixed flex text-xs font-bold items-center justify-center text-blue-500">`),
  _tmpl$4 = /*#__PURE__*/_$template(`<div class="fixed flex text-xs font-bold items-center justify-center text-orange-500">`);
import { ComponentOutline } from "./ComponentOutline";
export function Outline(props) {
  const box = () => props.element.thisElement.box;
  const domElementInfo = () => {
    const htmlElement = props.element.htmlElement;
    const box = props.element.thisElement.box;
    if (htmlElement && box) {
      const style = window.getComputedStyle(htmlElement);
      const display = style.display;
      const margin = {
        top: parseFloat(style.marginTop),
        left: parseFloat(style.marginLeft),
        right: parseFloat(style.marginRight),
        bottom: parseFloat(style.marginBottom)
      };
      const padding = {
        top: parseFloat(style.paddingTop),
        left: parseFloat(style.paddingLeft),
        right: parseFloat(style.paddingRight),
        bottom: parseFloat(style.paddingBottom)
      };
      const individualMarginBoxes = {
        top: {
          top: box.y - margin.top,
          left: box.x,
          width: box.width,
          height: margin.top,
          label: label(margin.top)
        },
        left: {
          top: box.y - margin.top,
          left: box.x - margin.left,
          width: margin.left,
          height: box.height + margin.top + margin.bottom,
          label: label(margin.left)
        },
        right: {
          top: box.y - margin.top,
          left: box.x + box.width,
          width: margin.right,
          height: box.height + margin.top + margin.bottom,
          label: label(margin.right)
        },
        bottom: {
          top: box.y + box.height,
          left: box.x,
          width: box.width,
          height: margin.bottom,
          label: label(margin.bottom)
        }
      };
      const individualPaddingBoxes = {
        top: {
          top: box.y,
          left: box.x,
          width: box.width,
          height: padding.top,
          label: label(padding.top)
        },
        left: {
          top: box.y + padding.top,
          left: box.x,
          width: padding.left,
          height: box.height - padding.top - padding.bottom,
          label: label(padding.left)
        },
        right: {
          top: box.y + padding.top,
          left: box.x + box.width - padding.right,
          width: padding.right,
          height: box.height - padding.top - padding.bottom,
          label: label(padding.right)
        },
        bottom: {
          top: box.y + box.height - padding.bottom,
          left: box.x,
          width: box.width,
          height: padding.bottom,
          label: label(padding.bottom)
        }
      };
      return {
        margin: individualMarginBoxes,
        padding: individualPaddingBoxes,
        innerBox: {
          top: box.y + padding.top,
          left: box.x + padding.left,
          width: box.width - padding.left - padding.right,
          height: box.height - padding.top - padding.bottom,
          label: ""
        }
      };
    }
    return null;
  };
  return [(() => {
    const _el$ = _tmpl$(),
      _el$2 = _el$.firstChild,
      _el$3 = _el$2.firstChild,
      _el$4 = _el$3.firstChild;
    _$insert(_el$, (() => {
      const _c$ = _$memo(() => !!domElementInfo());
      return () => _c$() && _$createComponent(RenderBoxes, {
        get allBoxes() {
          return domElementInfo();
        }
      });
    })(), _el$2);
    _el$2.style.setProperty("text-shadow", "-1px 1px 0 #fff, 1px 1px 0 #fff, 1px -1px 0 #fff, -1px -1px 0 #fff");
    _el$2.style.setProperty("text-overflow", "ellipsis");
    _el$3.$$click = () => {
      props.showTreeFromElement(props.element.htmlElement);
    };
    _el$4.style.setProperty("width", "16px");
    _el$4.style.setProperty("height", "16\xE9x");
    _$insert(_el$2, () => props.element.thisElement.label, null);
    _$effect(_p$ => {
      const _v$ = box().x + "px",
        _v$2 = box().y + "px",
        _v$3 = box().width + "px",
        _v$4 = box().height + "px",
        _v$5 = {
          "text-shadow": "none",
          "pointer-events": "auto",
          cursor: "pointer",
          ...(box().width < 50 || box().height < 50 ? {
            top: "-8px",
            left: "-8px"
          } : {})
        };
      _v$ !== _p$._v$ && ((_p$._v$ = _v$) != null ? _el$2.style.setProperty("left", _v$) : _el$2.style.removeProperty("left"));
      _v$2 !== _p$._v$2 && ((_p$._v$2 = _v$2) != null ? _el$2.style.setProperty("top", _v$2) : _el$2.style.removeProperty("top"));
      _v$3 !== _p$._v$3 && ((_p$._v$3 = _v$3) != null ? _el$2.style.setProperty("width", _v$3) : _el$2.style.removeProperty("width"));
      _v$4 !== _p$._v$4 && ((_p$._v$4 = _v$4) != null ? _el$2.style.setProperty("height", _v$4) : _el$2.style.removeProperty("height"));
      _p$._v$5 = _$style(_el$3, _v$5, _p$._v$5);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined,
      _v$4: undefined,
      _v$5: undefined
    });
    return _el$;
  })(), _$createComponent(ComponentOutline, {
    get labels() {
      return props.element.componentsLabels;
    },
    get bbox() {
      return props.element.componentBox;
    },
    get element() {
      return props.element.htmlElement;
    },
    get showTreeFromElement() {
      return props.showTreeFromElement;
    },
    get targets() {
      return props.targets;
    }
  })];
}
function RenderBoxes(props) {
  return [_$memo(() => Object.entries(props.allBoxes.margin).map(([key, box]) => {
    return (() => {
      const _el$6 = _tmpl$3();
      _el$6.style.setProperty("background-color", "rgba(0, 181, 222, 0.1)");
      _el$6.style.setProperty("text-shadow", "-1px 1px 0 #fff, 1px 1px 0 #fff, 1px -1px 0 #fff, -1px -1px 0 #fff");
      _$effect(_p$ => {
        const _v$10 = box.left + "px",
          _v$11 = box.top + "px",
          _v$12 = box.width + "px",
          _v$13 = box.height + "px";
        _v$10 !== _p$._v$10 && ((_p$._v$10 = _v$10) != null ? _el$6.style.setProperty("left", _v$10) : _el$6.style.removeProperty("left"));
        _v$11 !== _p$._v$11 && ((_p$._v$11 = _v$11) != null ? _el$6.style.setProperty("top", _v$11) : _el$6.style.removeProperty("top"));
        _v$12 !== _p$._v$12 && ((_p$._v$12 = _v$12) != null ? _el$6.style.setProperty("width", _v$12) : _el$6.style.removeProperty("width"));
        _v$13 !== _p$._v$13 && ((_p$._v$13 = _v$13) != null ? _el$6.style.setProperty("height", _v$13) : _el$6.style.removeProperty("height"));
        return _p$;
      }, {
        _v$10: undefined,
        _v$11: undefined,
        _v$12: undefined,
        _v$13: undefined
      });
      return _el$6;
    })();
  })), _$memo(() => Object.entries(props.allBoxes.padding).map(([key, box]) => {
    return (() => {
      const _el$7 = _tmpl$4();
      _el$7.style.setProperty("background-color", "rgba(222, 148, 0, 0.3)");
      _el$7.style.setProperty("text-shadow", "-1px 1px 0 #fff, 1px 1px 0 #fff, 1px -1px 0 #fff, -1px -1px 0 #fff");
      _$effect(_p$ => {
        const _v$14 = box.left + "px",
          _v$15 = box.top + "px",
          _v$16 = box.width + "px",
          _v$17 = box.height + "px";
        _v$14 !== _p$._v$14 && ((_p$._v$14 = _v$14) != null ? _el$7.style.setProperty("left", _v$14) : _el$7.style.removeProperty("left"));
        _v$15 !== _p$._v$15 && ((_p$._v$15 = _v$15) != null ? _el$7.style.setProperty("top", _v$15) : _el$7.style.removeProperty("top"));
        _v$16 !== _p$._v$16 && ((_p$._v$16 = _v$16) != null ? _el$7.style.setProperty("width", _v$16) : _el$7.style.removeProperty("width"));
        _v$17 !== _p$._v$17 && ((_p$._v$17 = _v$17) != null ? _el$7.style.setProperty("height", _v$17) : _el$7.style.removeProperty("height"));
        return _p$;
      }, {
        _v$14: undefined,
        _v$15: undefined,
        _v$16: undefined,
        _v$17: undefined
      });
      return _el$7;
    })();
  })), (() => {
    const _el$5 = _tmpl$2();
    _el$5.style.setProperty("background-color", "rgba(0, 133, 222, 0.3)");
    _el$5.style.setProperty("text-shadow", "-1px 1px 0 #fff, 1px 1px 0 #fff, 1px -1px 0 #fff, -1px -1px 0 #fff");
    _$insert(_el$5, () => props.allBoxes.innerBox.label);
    _$effect(_p$ => {
      const _v$6 = props.allBoxes.innerBox.left + "px",
        _v$7 = props.allBoxes.innerBox.top + "px",
        _v$8 = props.allBoxes.innerBox.width + "px",
        _v$9 = props.allBoxes.innerBox.height + "px";
      _v$6 !== _p$._v$6 && ((_p$._v$6 = _v$6) != null ? _el$5.style.setProperty("left", _v$6) : _el$5.style.removeProperty("left"));
      _v$7 !== _p$._v$7 && ((_p$._v$7 = _v$7) != null ? _el$5.style.setProperty("top", _v$7) : _el$5.style.removeProperty("top"));
      _v$8 !== _p$._v$8 && ((_p$._v$8 = _v$8) != null ? _el$5.style.setProperty("width", _v$8) : _el$5.style.removeProperty("width"));
      _v$9 !== _p$._v$9 && ((_p$._v$9 = _v$9) != null ? _el$5.style.setProperty("height", _v$9) : _el$5.style.removeProperty("height"));
      return _p$;
    }, {
      _v$6: undefined,
      _v$7: undefined,
      _v$8: undefined,
      _v$9: undefined
    });
    return _el$5;
  })()];
}
function label(value) {
  return value ? `${value}px` : "";
}
_$delegateEvents(["click"]);